[{"/home/elie/Desktop/challenge/challenge/src/App.js":"1","/home/elie/Desktop/challenge/challenge/src/index.js":"2","/home/elie/Desktop/challenge/challenge/src/reportWebVitals.js":"3","/home/elie/Desktop/challenge/challenge/src/components/Join/Join.js":"4","/home/elie/Desktop/challenge/challenge/src/components/InfoBar/InfoBar.js":"5","/home/elie/Desktop/challenge/challenge/src/components/Messages/Message/Message.js":"6","/home/elie/Desktop/challenge/challenge/src/components/Messages/Messages.js":"7","/home/elie/Desktop/challenge/challenge/src/components/Chat/Chat.js":"8","/home/elie/Desktop/challenge/challenge/src/components/Input/Input.js":"9","/home/elie/Desktop/challenge/challenge/src/components/TextContainer/TextContainer.js":"10"},{"size":3180,"mtime":1611814421396,"results":"11","hashOfConfig":"12"},{"size":140,"mtime":1611816305576,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611750831762,"results":"14","hashOfConfig":"12"},{"size":933,"mtime":1611789643000,"results":"15","hashOfConfig":"12"},{"size":515,"mtime":1611815202012,"results":"16","hashOfConfig":"12"},{"size":1123,"mtime":1611822339771,"results":"17","hashOfConfig":"12"},{"size":368,"mtime":1611820864239,"results":"18","hashOfConfig":"12"},{"size":3949,"mtime":1611821658768,"results":"19","hashOfConfig":"12"},{"size":508,"mtime":1611815450407,"results":"20","hashOfConfig":"12"},{"size":817,"mtime":1611807657000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zvfp1c",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/elie/Desktop/challenge/challenge/src/App.js",["47"],"/home/elie/Desktop/challenge/challenge/src/index.js",[],["48","49"],"/home/elie/Desktop/challenge/challenge/src/reportWebVitals.js",[],"/home/elie/Desktop/challenge/challenge/src/components/Join/Join.js",[],["50","51"],"/home/elie/Desktop/challenge/challenge/src/components/InfoBar/InfoBar.js",[],["52","53"],"/home/elie/Desktop/challenge/challenge/src/components/Messages/Message/Message.js",[],"/home/elie/Desktop/challenge/challenge/src/components/Messages/Messages.js",[],["54","55"],"/home/elie/Desktop/challenge/challenge/src/components/Chat/Chat.js",["56","57","58"],"import React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\nimport './Chat.css'\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nlet socket;\n\n\nconst Chat = ({ location })=>{\n     const [isConnected,setIsConnected]=useState(false)\n     const [id,setId]=useState('')\n    const [oldData, setOldData] = useState([]);\n    // const [clients, setClients] = useState([]);\n     //const [answer, setAnswer] = useState();\n\n\n     const [users, setUsers] = useState('');\n     const [message, setMessage] = useState('');\n     const [messages, setMessages] = useState([]);\n     const [room, setRoom] = useState(' ');\n    const [name, setName] = useState('');\n   \n    \n    \n    \n    const ENDPOINT = 'https://codi-server.herokuapp.com';\n\n    useEffect(() => {\n        const { name, room } = queryString.parse(location.search);\n        // var connectionOptions =  {\n        //     \"force new connection\" : true,\n        //     \"reconnectionAttempts\": \"Infinity\", \n        //     \"timeout\" : 10000,                  \n        //     \"transports\" : [\"websocket\"]\n        // };\n        socket = io('https://codi-server.herokuapp.com');\n        setRoom(room);\n        setName(name)\n\n        console.log(socket)\n    \n        socket.on(\"connect\", () => {\n          setIsConnected(true);\n        });\n\n        socket.on(\"pong!\", (additionalStuff) => {\n          console.log(\"the server answered!\", additionalStuff);\n        });\n        \n        socket.emit(\"whoami\")\n        socket.on(\"youare\", (answer) => {\n          setId(answer.id );\n          \n        });\n        socket.on(\"disconnect\", () => {\n          setIsConnected(false);\n        });\n\n        socket.on(\"room\", (old_messages) => {\n          setMessages(old_messages);\n          //setMessages(messages => [ ...messages, old_messages ]);\n          //console.log(messages)\n        });\n\n        socket.on('peeps', (clients) => {\n         setUsers(clients)\n         //  console.log(this.state.users)\n         }) \n        // this.socket.on(\"room\", (old_messages) => {\n        //   this.setState({oldMessages:old_messages})\n        //  // console.log(this.state.oldMessages)\n        // });\n\n      }, [ENDPOINT, location.search]);\n\n      // sendAnswer=()=>{\n      //   const body={\n      //     text:answer,\n      //     id:id,\n      //     name:name }\n      //   this.socket.send(body,(message_from_server)=>console.log(message_from_server))\n      // }\n      // handleAnswer=(e)=>{\n      //   e.preventDefault();\n      //   setAnswer(e.target.value)\n      //   console.log(answer)\n    \n      // }\n\n    //   useEffect(() => {\n    //     socket.on('message', message => {\n    //       setMessages(messages => [ ...messages, message ]);\n    //     });\n\n    //     socket.on(\"roomData\", ({ users }) => {\n    //         setUsers(users);\n    //       });\n    // },[])\n\n    const sendMessage=(event)=>{\n        event.preventDefault()\n        if (message){\n\n          const body={\n            text:message,\n            id:id,\n            name:name }\n\n            socket.send(body,(message_from_server)=>console.log(message_from_server))\n            setMessage('')\n        }\n    }\n\n    console.log(name,messages)\n      \n\n    return (\n        <div className=\"outerContainer\">\n          <h1> status:{isConnected ? \"connected\" : \"disconnected\"}</h1>\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} n={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n    )\n}\nexport default Chat;\n\n{/* <input value={message}\n                onChange={(event)=>setMessage(event.target.value)}\n                onKeyPress={event=>event.key==='Enter'? sendMessage(event):null} /> */}","/home/elie/Desktop/challenge/challenge/src/components/Input/Input.js",[],"/home/elie/Desktop/challenge/challenge/src/components/TextContainer/TextContainer.js",[],{"ruleId":"59","severity":1,"message":"60","line":3,"column":14,"nodeType":"61","messageId":"62","endLine":3,"endColumn":20},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"63","replacedBy":"69"},{"ruleId":"65","replacedBy":"70"},{"ruleId":"63","replacedBy":"71"},{"ruleId":"65","replacedBy":"72"},{"ruleId":"59","severity":1,"message":"73","line":16,"column":12,"nodeType":"61","messageId":"62","endLine":16,"endColumn":19},{"ruleId":"59","severity":1,"message":"74","line":16,"column":21,"nodeType":"61","messageId":"62","endLine":16,"endColumn":31},{"ruleId":"75","severity":1,"message":"76","line":135,"column":1,"nodeType":"77","messageId":"78","endLine":137,"endColumn":88},"no-unused-vars","'Socket' is defined but never used.","Identifier","unusedVar","no-native-reassign",["79"],"no-negated-in-lhs",["80"],["79"],["80"],["79"],["80"],["79"],["80"],"'oldData' is assigned a value but never used.","'setOldData' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-global-assign","no-unsafe-negation"]